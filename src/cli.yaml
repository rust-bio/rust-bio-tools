name: Rust-Bio-Tools
author: Johannes Köster <johannes.koester@tu-dortmund.de>
about: A set of ultra-fast command line utilities for bioinformatics tasks based on Rust-Bio.

settings:
  - SubcommandRequired

global_settings:
  - ColoredHelp

args:
  - verbose:
      long: verbose
      short: v
      help: Verbose output.

subcommands:
  - fastq-split:
      about: |
        Split FASTQ file from STDIN into N chunks.

        Example:
        rbt fastq-split A.fastq B.fastq < test.fastq
        {n}
      author: Johannes Köster <johannes.koester@tu-dortmund.de>
      args:
        - chunks:
            multiple: true
            help: File name(s) for the chunks to create.

  - fastq-filter:
      about: |
        Remove records from a FASTQ file (from STDIN), output to STDOUT.

        Example:
        rbt fastq-filter ids.txt < test.fastq > filtered.fastq
        {n}
      author: Erik Clarke <ecl@pennmedicine.upenn.edu>
      args:
        - ids:
            required: true
            help: File with list of record IDs to remove, one per line.


  - bam-depth:
      about: |
        Print depth of BAM or CRAM file at given positions from STDIN (tab separated: chrom, pos).

        Usage:
        $ rbt bam-depth test.bam < pos.txt > depth.txt

        The positions file contains the name of one reference sequence and one position per line (tab separated).
        Example:

        16	1
        17	38
        17	39

        Depths are written to stdout as tab-separated lines, similar to the positions input.
        Example:

        16	1	0
        17	38	14
        17	39	13
        {n}
      author: Johannes Köster <johannes.koester@tu-dortmund.de>
      args:
        - bam-path:
            required: true
            help: Path to indexed BAM file.
        - max-read-length:
            short: m
            value_name: INT
            default_value: "1000"
            help: "Maximum read length to consider. This affects the speed of the involved pileup. Reads longer than this length can be missed when calculating the depth."
        - include-flags:
            long: incl-flags
            short: i
            value_name: INT
            help:  "Skip reads with mask bits unset []."
        - exclude-flags:
            long: excl-flags
            short: e
            value_name: INT
            help: "Skip reads with mask bits set [UNMAP, SECONDARY, QCFAIL, DUP]."
        - min-mapq:
            long: "min-mapq"
            short: "q"
            value_name: INT
            default_value: "0"
            help: "Minimum mapping quality."

  - vcf-fix-iupac-alleles:
      about: |
        Convert any IUPAC codes in alleles into Ns (in order to comply with VCF 4 specs).
        Reads VCF/BCF from STDIN and writes BCF to STDOUT.

        Example:
        rbt vcf-fix-iupac-alleles < test.vcf > fixed.bcf
      author: Johannes Köster <johannes.koester@uni-due.de>

  - vcf-to-txt:
      about: |
        Convert VCF/BCF file from STDIN to tab-separated TXT file at STDOUT.
        INFO and FORMAT tags have to be selected explicitly.

        Example:
        rbt vcf-to-txt --genotypes --fmt S --info T X SOMATIC < test.vcf > variant-table.txt

        The resulting table can be e.g. parsed with PANDAS in Python:

        pd.read_table("variants.txt", header=[0, 1])
        {n}
      author: Johannes Köster <johannes.koester@tu-dortmund.de>
      args:
        - info:
            long: info
            short: i
            value_name: NAME
            multiple: true
            help: Select INFO tags.
        - format:
            long: fmt
            short: f
            value_name: NAME
            multiple: true
            help: Select FORMAT tags.
        - genotypes:
            long: genotypes
            short: g
            help: Display genotypes.

  - vcf-match:
      about: |
        Annotate for each variant in a VCF/BCF at STDIN whether it is contained in a
        given second VCF/BCF. The matching is fuzzy for indels and exact for SNVs.
        Results are printed as BCF to STDOUT, with an additional INFO tag MATCHING.
        The two vcfs do not have to be sorted.

        Example:
        rbt vcf-match dbsnp.vcf < calls.vcf | bcftools view
        {n}
      author: Johannes Köster <johannes.koester@tu-dortmund.de>
      args:
        - vcf:
            required: true
            help: VCF/BCF file to match against.
        - max-dist:
            long: max-dist
            short: d
            value_name: INT
            default_value: "20"
            help: Maximum distance between centres of two indels considered to match.
        - max-len-diff:
            long: max-len-diff
            short: l
            value_name: INT
            default_value: "10"
            help: Maximum difference between lengths of two indels.

  - vcf-baf:
      about: |
        Annotate b-allele frequency for each single nucleotide variant and sample.

        Example:
        rbt vcf-baf < calls.bcf > annotated.bcf
        {n}
      author: Johannes Köster <johannes.koester@uni-due.de>, Jan Forster <j.forster@dkfz.de>

  - vcf-annotate-dgidb:
        about: |
            Looks for interacting drugs in DGIdb and annotates them for every gene in every record.

            Example:
                rbt vcf-annotate-dgidb input.vcf > output.vcf
        args:
          - vcf:
              required: true
              help: VCF/BCF file to be extended by dgidb drug entries
          - api-path:
              long: api-path
              short: p
              default_value: http://dgidb.org/api/v2/interactions.json?genes=
              help: url prefix for requesting interaction drugs by gene names.
          - field:
              long: field
              short: f
              default_value: dgiDB_drugs
              help: Info field name to be used for annotation.
          - genes-per-request:
              long: genes-per-request
              short: g
              default_value: "500"
              help: |
                Number of genes to submit per api request. A lower value increases the number of api requests in return. 
                Too many requests could be rejected by the DGIdb server.
        author: Felix Mölder <felix.moelder@uni-due.de>
  
  - oncoprint:
      about: |
        Creates oncoprint from given VCF/BCF files.

        Example:
          rbt oncoprint a=a.bcf b=b.bcf c=c.bcf > oncoprint.html
      
      args:
        - vcfs:
            multiple: true
            value_name: NAME=FILE
            help: VCF/BCF files to include (single-sample). Name is the sample name that will be used in the oncoprint.

  - collapse-reads-to-fragments:
      about: |
        Tool to predict maximum likelihood fragment sequence from FASTQ or BAM files.

        Requirements:
          - starcode
        {n}
      author: Johannes Köster <johannes.koester@uni-due.de>, Henning Timm <henning.timm@tu-dortmund.de>, Felix Mölder <felix.moelder@uni-due.de>
      subcommands:
        - fastq:
            about: |
              Tool to merge sets of reads from paired FASTQ files that share the UMI and have similar read sequence. The result is a maximum likelihood fragment sequence per set with base quality scores improved accordingly.

              Takes two FASTQ files (forward and reverse) and returns two FASTQ files in which all PCR duplicates have been merged into a consensus read.
              Duplicates are identified by a Unique Molecular Identifier (UMI).

              Assumptions:
                - Reads are of equal length
                - UMI is the prefix of the reads

              Example:
              rbt collapse-reads-to-fragments fastq \
                reads_1.fq reads_2.fq \    # input files
                merged_1.fq merged_2.fq \  # output files
                -l 13 \                    # length of UMI
                -d 1 \                     # max hamming distance of UMIs within a cluster
                -D 2 \                     # max hamming distance of sequences within a cluster
                --umi-on-reverse           # UMI is the prefix of the reverse read
              {n}
            author: Johannes Köster <johannes.koester@uni-due.de>, Henning Timm <henning.timm@tu-dortmund.de>, Felix Mölder <felix.moelder@uni-due.de>
            args:
                - fq1:
                    required: true
                    help: Input FASTQ file with forward reads.
                - fq2:
                    required: true
                    help: Input FASTQ file with reverse reads.
                - consensus-fq1:
                    required: true
                    help: Output FASTQ file with forward reads.
                - consensus-fq2:
                    required: true
                    help: Output FASTQ file with reverse reads.
                - consensus-fq3:
                    requires: [insert-size, std-dev]
                    help: Output FASTQ file for overlapping consensus reads  (Required for calculating overlapping consensus only)
                - max-umi-dist:
                    long: max-umi-dist
                    short: d
                    default_value: "1"
                    help: Maximum hamming distance between the UMIs of any pair of reads in the same cluster.
                - umi-len:
                    long: umi-len
                    short: l
                    default_value: "8"
                    help: Length of UMI in read.
                - max-seq-dist:
                    long: max-seq-dist
                    short: D
                    possible_values: ["1", "2", "3", "4", "5", "6", "7", "8"]
                    default_value: "2"
                    help: Maximum hamming distance between the sequences of any pair of reads in the same cluster.
                - umi-on-reverse:
                    long: umi-on-reverse
                    short: u
                    help: Set if UMI is on reverse read
                - verbose-read-names:
                    long: verbose-read-names
                    help: Add list of reads that were merged for each consensus read. Note that this can yield very long FASTQ name lines which cannot be handled by some tools.
                - insert-size:
                    long: insert-size
                    short: i
                    takes_value: true
                    requires: [consensus-fq3, std-dev]
                    help: Expected insert size of sequenced fragment (Required for calculating overlapping consensus only)
                - std-dev:
                    long: std-dev
                    short: s
                    takes_value: true
                    requires: [consensus-fq3, insert-size]
                    help: Standard deviation of expected insert size. Defines search space of the most likely overlap. (Required for calculating overlapping consensus only)
        - bam:
            about: |
              Tool to merge sets of PCR duplicate reads from a BAM file into one maximum likelihood fragment sequence each with accordingly improved base quality scores.

              Takes a BAM file and returns a BAM file in which all PCR duplicates have been merged into a consensus read.
              Duplicates must be marked by Picard Tools using the TAG_DUPLICATE_SET_MEMBERS option.

              Assumptions:
                - Reads are of equal length
                - Reads are marked by Picard Tools
              {n}
            author: Felix Mölder <felix.moelder@uni-due.de>
            args:
              - bam:
                  required: true
                  help: Input BAM file with marked duplicates
              - consensus-bam:
                  required: true
                  help: Output BAM file with unaligned consensus reads
              - max-seq-dist:
                  long: max-seq-dist
                  short: D
                  possible_values: ["1", "2", "3", "4", "5", "6", "7", "8"]
                  default_value: "2"
                  help: Maximum hamming distance between the sequences of any pair of reads in the same cluster.
              - verbose-read-names:
                  long: verbose-read-names
                  help: Add list of reads that were merged for each consensus read. Note that this can yield very long FASTQ name lines which cannot be handled by some tools.


  - sequences-stats:
      about: |
        Tool to compute stats on sequence file (from STDIN), output is in YAML with field:
          - min: length of shortest sequence
          - max: length of longest sequence
          - average: average length of sequence
          - median: median length of sequence
          - nb_reads: number of reads
          - nb_bases: number of bases
          - n50: N50 of sequences

        Example:
          rbt sequences-stats < test.fasta
          rbt sequences-stats -q < test.fastq
        {n}
      author: Pierre Marijon <pmarijon@mpi-inf.mpg.de>
      args:
        - fastq:
            long: fastq
            short: q
            help: Flag to indicate the sequence in stdin is in fastq format
