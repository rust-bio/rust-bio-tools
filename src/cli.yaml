name: Rust-Bio-Tools
author: Johannes Köster <johannes.koester@tu-dortmund.de>
about: A set of ultra-fast command line utilities for bioinformatics tasks based on Rust-Bio.

settings:
  - SubcommandRequired

global_settings:
  - ColoredHelp

args:
  - verbose:
      long: verbose
      short: v
      help: Verbose output.

subcommands:
  - fastq-split:
      about: Split FASTQ file from STDIN into N chunks.
      author: Johannes Köster <johannes.koester@tu-dortmund.de>
      args:
        - chunks:
            multiple: true
            help: Chunks to create.

  - fastq-filter:
      about: Remove records from a FASTQ file (from STDIN), output to STDOUT.
      author: Erik Clarke <ecl@pennmedicine.upenn.edu>
      args:
        - ids:
            required: true
            help: File with list of record IDs to remove, one per line.


  - bam-depth:
      about: |
        Print depth of BAM or CRAM file at given positions from STDIN (tab separated: chrom, pos).
             
        Input:
          A BAM file and a positions file.
          The positions file contains the name of one reference sequence and one position per line (tab separated).
          Example:
            
            16	1
            17	1
            17	2
            17	38
            17	39
            
            
          Positions are read from stdin, the BAM file is the first argument.
             
        Output:
          Depth are written to stdout as tab-separated lines, similar to the positions input.
          Example:
            
            16	1	0
            17	1	5
            17	2	5
            17	38	14
            17	39	13

             
        Usage:
          $ rbt bam-depth test.bam < pos.txt > depth.txt
          
          Where `pos.txt` is a positions file, as described above.
      author: Johannes Köster <johannes.koester@tu-dortmund.de>
      args:
        - bam-path:
            required: true
            help: Path to indexed BAM file.
        - max-read-length:
            short: m
            value_name: INT
            default_value: "1000"
            help: "Maximum read length to consider. This affects the speed of the involved pileup. Reads longer than this length can be missed when calculating the depth."
        - include-flags:
            long: incl-flags
            short: i
            value_name: INT
            help:  "Skip reads with mask bits unset []."
        - exclude-flags:
            long: excl-flags
            short: e
            value_name: INT
            help: "Skip reads with mask bits set [UNMAP, SECONDARY, QCFAIL, DUP]."
        - min-mapq:
            long: "min-mapq"
            short: "q"
            value_name: INT
            default_value: "0"
            help: "Minimum mapping quality."

  - vcf-to-txt:
      about: |
        Convert VCF/BCF file from STDIN to tab-separated TXT file at STDOUT.
        INFO and FORMAT tags have to be selected explicitly.
        The resulting table can be e.g. parsed with PANDAS in Python:

        pd.read_table("variants.txt", header=[0, 1])
      author: Johannes Köster <johannes.koester@tu-dortmund.de>
      args:
        - info:
            long: info
            short: i
            value_name: NAME
            multiple: true
            help: Select INFO tags.
        - format:
            long: fmt
            short: f
            value_name: NAME
            multiple: true
            help: Select FORMAT tags.
        - genotypes:
            long: genotypes
            short: g
            help: Display genotypes.

  - vcf-match:
      about: |
        Annotate for each variant in a VCF/BCF at STDIN whether it is contained in a
        given second VCF/BCF. The matching is fuzzy for indels and exact for SNVs.
        Results are printed as BCF to STDOUT, with an additional INFO tag MATCHING.
        The two vcfs do not have to be sorted.

        Example:
        rbt vcf-match dbsnp.vcf < calls.vcf | bcftools view
      author: Johannes Köster <johannes.koester@tu-dortmund.de>
      args:
        - vcf:
            required: true
            help: VCF/BCF file to match against.
        - max-dist:
            long: max-dist
            short: d
            value_name: INT
            default_value: "20"
            help: Maximum distance between centres of two indels considered to match.
        - max-len-diff:
            long: max-len-diff
            short: l
            value_name: INT
            default_value: "10"
            help: Maximum difference between lengths of two indels.

  - vcf-baf:
      about: |
        Annotate b-allele frequency for each single nucleotide variant and sample.

        Example:
        rbt vcf-baf < calls.bcf > annotated.bcf
      author: Johannes Köster <johannes.koester@uni-due.de>, Jan Forster <j.forster@dkfz.de>

  - call-consensus-reads:
      about: |
        Group reads by UMI and calculate consensus.
      author: Johannes Köster <johannes.koester@uni-due.de>, Henning Timm <henning.timm@tu-dortmund.de>, Felix Mölder <felix.moelder@uni-due.de>
      args:
        - fq1:
            required: true
            help: Input FASTQ file with forward reads.
        - fq2:
            required: true
            help: Input FASTQ file with reverse reads.
        - consensus-fq1:
            required: true
            help: Output FASTQ file with forward reads.
        - consensus-fq2:
            required: true
            help: Output FASTQ file with reverse reads.
        - consensus-fq3:
            requires: [insert-size, std-dev]
            help: Output FASTQ file for overlapping consensus reads  (Required for calculating overlapping consensus only)
        - max-umi-dist:
            long: max-umi-dist
            short: d
            default_value: "1"
            help: Maximum hamming distance between the UMIs of any pair of reads in the same cluster.
        - umi-len:
            long: umi-len
            short: l
            default_value: "8"
            help: Length of UMI in reverse read.
        - max-seq-dist:
            long: max-seq-dist
            short: D
            possible_values: ["1", "2", "3", "4", "5", "6", "7", "8"]
            default_value: "2"
            help: Maximum hamming distance between the sequences of any pair of reads in the same cluster.
        - reverse-umi:
            long: reverse-umi
            short: u
            help: Set if UMI is on reverse read
        - insert-size:
            long: insert-size
            short: i
            takes_value: true
            requires: [consensus-fq3, std-dev]
            help: Expected insert size of sequenced fragment (Required for calculating overlapping consensus only)
        - std-dev:
            long: std-dev
            short: s
            takes_value: true
            requires: [consensus-fq3, insert-size]
            help: Standard deviation of expected insert size. Defines search space of the most likely overlap. (Required for calculating overlapping consensus only)
